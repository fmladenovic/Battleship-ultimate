package secondPhase


function List<Move> canBeChosen( MoveDecision moveDecision ) {

	Move lastHitMove = null;
	List<Move> moves = moveDecision.getMoves();
	for( int i = moves.size() - 1; i >= 0; i-- ) {
		if(moves.get(i).isHit()) {
			lastHitMove = moves.get(i);
			break;
		}
	}

	
	int x = lastHitMove.getPosition().getX();
	int y = lastHitMove.getPosition().getY(); 
	
	List<Move> avMoves = new ArrayList<>();
	
	if( x + 1 < 14 ) {
		avMoves.add( new Move(new Tuple( x + 1, y ), false, Strategy.AFTER_HIT, Region.AFTER_HIT_DOWN) );
	}
	if( y + 1 < 14 ) {
		avMoves.add( new Move(new Tuple( x, y + 1 ), false, Strategy.AFTER_HIT, Region.AFTER_HIT_RIGHT) );
	}
	if( x - 1 >= 0 ) {
		avMoves.add( new Move(new Tuple( x - 1, y ), false, Strategy.AFTER_HIT, Region.AFTER_HIT_UP) );
	}
	if( y - 1 >= 0 ) {
		avMoves.add( new Move(new Tuple( x, y - 1 ), false, Strategy.AFTER_HIT, Region.AFTER_HIT_LEFT) );
	}

	for(Move m : moves) {
		for( Move mo : avMoves ) {
			if( m.getPosition().equals(mo.getPosition()) ) {
				avMoves.remove(mo);
				break;
			}
		}
	}
	
	return avMoves;
}


function Move checkTail( MoveDecision moveDecision ) {
	List<Move> moves = moveDecision.getMoves();
	Move lastMove = moves.get( moves.size() - 1 );
	int x = lastMove.getPosition().getX();
	int y = lastMove.getPosition().getY();

	Move move = null;
	boolean inMoves = true;
	while(inMoves) {
		
		if( lastMove.getRegion() == Region.AFTER_HIT_LEFT) {
			y++;
			move = new Move( new Tuple(x, y ), false,  Strategy.AFTER_HIT,  Region.AFTER_HIT_RIGHT);
		} else if(lastMove.getRegion() == Region.AFTER_HIT_RIGHT) {
			 y--;
			move = new Move( new Tuple(x, y), false,  Strategy.AFTER_HIT,  Region.AFTER_HIT_LEFT);
		} else if(lastMove.getRegion() == Region.AFTER_HIT_UP) {
			x++;
			move = new Move( new Tuple(x, y), false,  Strategy.AFTER_HIT,  Region.AFTER_HIT_DOWN);
		} else if(lastMove.getRegion() == Region.AFTER_HIT_DOWN) {
			x--;
			move = new Move( new Tuple(x, y), false,  Strategy.AFTER_HIT,  Region.AFTER_HIT_UP);
		} 
		// else {
		// 	System.out.println( "Neki region " + lastMove.getRegion() + " x: " + x + " y: " + y );
		// }

		// System.out.println( "x: " + x + " y: " + y );
		if( move == null || x < 0 || x >= 14 || y < 0 || y >= 14) return null;

		inMoves = false;
		for(Move m : moves) {
			if( m.getPosition().equals( move.getPosition() ) ) {
				inMoves = true;
				move = null;
				break;
			}
		} 
	}
	// System.out.println( move.getPosition() );
	return move;
}


function Move cont( MoveDecision moveDecision ) {

	List<Move> moves = moveDecision.getMoves();
	Move lastMove = moves.get( moves.size() - 1 );
	int x = lastMove.getPosition().getX();
	int y = lastMove.getPosition().getY(); 
	
	Move move = null;
	
	
	if( lastMove.getRegion() == Region.AFTER_HIT_RIGHT) {
		if( y + 1 < 14 ) {
			move = new Move( new Tuple(x, y + 1), false,  Strategy.AFTER_HIT,  Region.AFTER_HIT_RIGHT);
		}
	} else if(lastMove.getRegion() == Region.AFTER_HIT_LEFT) {
		if( y - 1 >= 0 ) {
			move = new Move( new Tuple(x, y - 1), false,  Strategy.AFTER_HIT,  Region.AFTER_HIT_LEFT);
		}
    } else if(lastMove.getRegion() == Region.AFTER_HIT_DOWN) {
    	if( x + 1 < 14 ) {
			move = new Move( new Tuple(x + 1, y), false,  Strategy.AFTER_HIT,  Region.AFTER_HIT_DOWN);
		}
    } else if(lastMove.getRegion() == Region.AFTER_HIT_UP) {
    	if( x - 1 >= 0 ) {
			move = new Move( new Tuple(x - 1, y), false,  Strategy.AFTER_HIT,  Region.AFTER_HIT_UP);
		}
    }
    
    if( move != null) {
	   	for(Move m : moves) {
			if( m.getPosition().equals( move.getPosition() ) ) {
				move = null;
				break;
			}
		}
	}
	
	return move;
}


rule "Continue in same direction"
	agenda-group "after_hit"
	no-loop
    when
        $md: MoveDecision(
        	decision == null,
			!readyForDecision,
			moves.size() > 0,
        	$lastMove: moves.get(moves.size() - 1),
        	$lastMove.isHit(),
        	$lastMove.getStrategy() == Strategy.AFTER_HIT
        )
    then
		Move move = cont( $md );
    	$md.setDecision( move );
		System.out.println( "Nastavi potapanje u istom pravcu... " + move );

    	update( $md );
end

rule "Check ships tail if commit hit and then miss"
	agenda-group "after_hit"
	no-loop
    when
        $md: MoveDecision(
        	decision == null,
			moves.size() > 1,
        	$lastMove: moves.get(moves.size() - 1),
			!$lastMove.isHit(),
			$moveBefore: moves.get(moves.size() - 2),
			$moveBefore.getRegion() == $lastMove.getRegion()
        )
    then
    	$md.setDecision( checkTail( $md ) );
		System.out.println( "Proveri da li se brod prostire u drugom pravcu...");
    	update( $md );
end


rule "Extract available moves"
    agenda-group "after_hit"
	no-loop

    when
        $md: MoveDecision(
        	decision == null,
			!readyForDecision
        )
    then
		// List<Move> moves = $md.getMoves();
		// List<Move> canBeChosenL = canBeChosen($md);
		// Move lastMove = moves.get(moves.size() - 1);
		// System.out.println("Moves size > 1: " + (moves.size() > 1));
		// System.out.println("LastMove is hit: " + lastMove.isHit());
		// System.out.println("LastMove strategy: " + lastMove.getStrategy());
		// System.out.println("CanBeChosen length: " + canBeChosenL.size() );
		// System.out.println( "Insertovana je lista slobodnih poteza..." );
		$md.setReadyForDecision( true );
		update( $md );
    	insert( canBeChosen($md) );   

end

rule "Check ships tail if we are left without fields in this direction"
	agenda-group "after_hit"
	no-loop
    when
        $md: MoveDecision(
        	decision == null,
			readyForDecision,
			moves.size() > 1,
        	$lastMove: moves.get(moves.size() - 1),
			$lastMove.isHit(),
        	$lastMove.getStrategy() == Strategy.AFTER_HIT
        )
		List( size() < 3 )
    then
    	$md.setDecision( checkTail( $md ) );
		System.out.println( "Proveri da li se brod prostire u drugom pravcu zato sto ne mozemo vise da proveravamo ovaj pravac...");
    	update( $md );
end




rule "Choose random move from available moves"
    agenda-group "after_hit"
	no-loop
    when
        $md: MoveDecision( 
        	decision == null
        )
        $available: List( size() > 0 )
    then
        Random rand = new Random();
        int randInt = rand.nextInt( $available.size() );
		$md.setDecision( (Move) $available.get(randInt) );
		System.out.println("Moramo da istrazimo okolinu pogodjenog polja...");
		
		update( $md );
end


rule "Choose random from table if we are explored all options"
    agenda-group "after_hit"
	no-loop
    when
        $md: MoveDecision( 
        	decision == null
        )
        $available: List( size() == 0 )
    then
        Move move = Strategy.generateMove(Strategy.RANDOM, Region.FREE, $md.getMoves());
        move.setStrategy(Strategy.RANDOM);
        $md.setDecision(move);
       	System.out.println("Istrazili smo sve opcije pa biramo slucajno polje sa table...");
        System.out.println("Random generisan par je " + move.getPosition());
		
		update( $md );
end
